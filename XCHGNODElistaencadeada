#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

typedef struct datanode{
      int id;

}DataNode;

typedef struct node{
      DataNode data;
      struct node* next;

}Node;

typedef struct list{
      int size;
      Node* head;
}List;

List* creatlist();
void push(List* list, DataNode data);
void printList(List* list);
void pop(List* list);
bool isEmpty(List* list);
Node* atPos(List* list, int index);
int indexof(List* list, Node* node);
void erase(List* list, int index);
void insert(List* list, DataNode data, int index);
void xchgNodes(List* list, Node* NodeA, Node* NodeB);

List* creatlist(){
      List* list = (List*) malloc(sizeof(List));

      list->size = 0;
      list->head = NULL;

      return list;
}

void push(List* list, DataNode data){
      Node* node = (Node*) malloc(sizeof(Node));
      node->data = data;
      node->next = list->head;
      list->head = node;
      list->size++;
}

void printList(List* list){
      
      if(isEmpty(list))
      {
        printf("Lista Vazia");
        return;
      }

      Node* pointer = list->head;

      while(pointer != NULL)
      {
        printf("%d ", pointer->data.id);
        pointer = pointer->next;
      }
}

bool isEmpty(List* list){
      return (list->size == 0);
}

void pop(List* list){

    if(!isEmpty(list)){
      Node* pointer = list->head;
      list->head = pointer->next;

      free(pointer);
      list->size--;
    }
}

Node* atPos(List* list, int index){
     
     if(index >= 0 && index < list->size)
     {
       Node* node = list->head;

       int i;
       for(i = 0; i < index; i++)
       {
         node = node->next;
       }
         return node;
     }

     return NULL;
}

int indexof(List* list, Node* node){
      
      if(node != NULL)
      {
        Node* pointer = list->head;

        int index = 0;
        while(pointer != node && pointer != NULL)
        {
          pointer = pointer->next;
          index++;
        }
        
        if(pointer != NULL)
        {
          return index;
        }

      }
      
      printf("Nó não pertence a lista\n");
      return -1;
}

void erase(List* list, int index){
       
       if(index == 0)
       {
         pop(list);
       }
       else
       {
          Node* current = atPos(list,index); 

         if(current != NULL)
         {
          Node* previous = atPos(list,index-1);
          previous->next = current->next;

          free(current);
          list->size--;
         }
       }
}

void insert(List* list, DataNode data, int index)
{
        if(index == 0)
        {
         push(list, data);
        }

        else
        {
          Node* current = atPos(list, index);

          if(current != NULL)
          {
            Node* previous = atPos(list, index-1);
            
            Node* newnode = (Node*) malloc(sizeof(Node));
            newnode->data = data;
            previous->next = newnode;
            newnode->next = current;
            list->size++;
          }

        }


}

void xchgNodes(List* list, Node* NodeA, Node* NodeB)
{
        if(NodeA == NodeB)
        {
          return;
        }

          int indexA = indexof(list, NodeA);
          int indexB = indexof(list, NodeB);

        if(indexA > indexB)
        {
          NodeA = NodeB;
          NodeB = atPos(list, indexA);

          indexA = indexB;
          indexB = indexof(list, NodeB);
        }

       Node* pb = atPos(list, indexB-1);

      if(NodeA == list->head)
      {
        list->head = NodeB;
      }
      else
      {
        Node* pa = atPos(list, indexA-1);
        pa->next = NodeB;
      }

      pb->next = NodeA;
      Node* pointer = NodeA->next;
      NodeA->next = NodeB->next;
      NodeB->next = pointer;

}


int main()
{
     List* l = creatlist();
     
     DataNode data;

     data.id = 5;
     push(l, data);

     data.id = 9;
     push(l, data);
     
     data.id = 3;
     push(l, data);

     data.id = 10;
     push(l, data);

     data.id = 2;
     push(l, data);

     printList(l);
     printf("\n");
     xchgNodes(l, l->head->next, l->head->next->next);
     printList(l);


  return 0;
}
